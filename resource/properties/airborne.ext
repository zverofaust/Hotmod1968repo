;SDL
actor

(include "vehicle.ext")
(include "abm.inc")
(include "armor.ext")
(include "mobility.inc")

{collider "airborne"}

{targetClass "airborne"}
{targetSelector "airborne_bullet"}

{props "airborne"}

{brain "airborne" {state "airborne"}}

{simulatorId "airborne"}

(define "air_movement"
	{dontUseSlope}
	{IgnorePatherBoundsAI}
	{disableBackward}
)

{Chassis "wheel"
	{locomotion
		{MaxSpeed		40	}	;// max speed while in wheeled mode in kph
		{maxSpeedAtMaxTurn 15}	;// max speed when at max turn in kph
		{TurnRadius		10	}	;// radius to do a 360° turn in meters
		{StartTime		20	}	;// time to accelerate to max speed from 0 kph in seconds
		{BrakeTime		2.5	}	;// time to decelerate from max speed to 0 kph in seconds when using brakes (hard stop)
		{StopTime		4	}	;// time to decelerate from max speed to 0 kph in seconds when coasting to a stop (not applying forward motion)
		{SteerOn		15	}	;// wheel turn speed in degrees per second
		{SteerOff		40	}	;// wheel stop turn speed in degrees per second
		{SplineRadius 	10	}	;// limit turning radius on the splines (path planner parameter), meters
	}
	{FuelBag
		{volume 500	}			;// maximum capacity of fuel tank in liters
		{rate	10	}			;// how much fuel is consumed during movement
		{remain 500	}			;// how much fuel is in fuel tank at spawn
		{fuel "fuel"}			;// type of fuel used. "fuel" = petrol/gasoline. "diesel" = diesel
	}
	{speed
		{Slow	10	}			;// speed for slow movement state
		{Normal	15	}			;// speed for normal movement state (single mouse click move order)
		{Fast	20	}			;// speed for fast movement state (double mouse click move order)
	}
	("air_movement")
}

{Chassis "airborne"
	{locomotion
		{Maxspeed		75	}	;// max speed while in flight mode in kph
		{turnRadius		50	}	;// radius to do a 360ø turn in meters
		{StartTime		8	}	;// time to accelerate to max speed from 0 kph in seconds
		{BrakeTime		3	}	;// time to decelerate from max speed to 0 kph in seconds when using brakes (hard stop)
		{StopTime		5	}	;// time to decelerate from max speed to 0 kph in seconds when coasting to a stop (not applying forward motion)
		{SplineRadius	10	}	;// limit turning radius on the splines (path planner parameter), meters
	}
	{FuelBag
		{volume 500 }			;// maximum capacity of fuel tank in liters
		{rate   10 	}			;// how much fuel is consumed during movemen
		{remain 500 }			;// how much fuel is in fuel tank at spawn
		{fuel "fuel"}			;// type of fuel used. "fuel" = petrol/gasoline. "diesel" = diesel
	}
	{speed						;/* Chassis "airborne" is a unique movement mode that only uses 1 speed (max speed) and ignores these speeds*/
		{Slow	60	}			;// ignored
		{Normal	80	}			;// ignored
		{Fast	100	}			;// ignored
	}

	("air_movement")
	{sideSlopeSpeed 	45	}	;// how quickly in degrees per second that aircraft rolls 
	{maxSideSlope 		15	}	;// limit in degrees that aircraft can roll while in a turn
	{maxElevationSpeed 	8	}	;// climb rate, how many meters per second aircraft changes altitude when in full climb or dive
	{elevationAcceleration 8}	;// how quickly aircraft can change from level flight to full climb or dive. (m/s^2)
	(mod "mp"
		{altitude 25}		;// spawns aircraft in air in multiplayer game mode 
	)
	{MaxAirborneAltitude 30}
}

(define "locomotion"
	;//{StartTime	10}		;// acceleration time from 0 to max. speed, seconds
	;//{BrakeTime	2}		;// deceleration time from max. speed to 0, seconds
	;//{StopTime	4}		;// stop time after turning off the engine from max. speed to 0, seconds
	;//{SteerOn	30}			;// wheel rotation speed, degree/s
	;//{SteerOff 30}		;// the speed of wheels returning to reference state, degree/s
	;//{SplineRadius 10}	;// limit turning radius on the splines (path planner parameter), meters
)

{chassisManager
	{current "wheel"}
}

{extender "inventory"
	{box
		{Size 9 10}
		{weight 20000}
	}
}

{hearingBias 250.0}				;// reduces units ability to hear sound signals. value = meters
{sensor
	{Visor "main"
		{vision "airborne_main"}
		{bone "visor"}
	}
	{visor "around"
		{vision "airborne_around"}
		{bone "basis"}
	}
}

(define "prop_blade"
	{volume "%number%volume"
		{tags "propeller" "still" "still%number"}
		{component "propeller%number"}
		{able clear {bullet} {blast} {touch} {contact} {NoWoundDecal}}
		{thickness 5}
	}
	{component "propeller%number"
		{RepairTime 20}
		{tags "propeller" "still" "still%number"}
		{RepairOrder 10}
	}
)

(define "prop_spin"
	{volume "%volume%number"
		{tags "propeller" "spin" "spin%number"}
		{component "propeller%number"}
		{able clear {NoWoundDecal}}
		{thickness 5}
	}
	{component "%volume%number"
		{RepairTime 20}
		{tags "propeller" "spin" "spin%number"}
		{RepairOrder 10}
	}
)

(define "engine"
	{volume "%volume%number"
		{tags "engine%number"}
		{component "%volume%number"}
		{able {visible 0}}
		{thickness 2}
	}
	{component "%volume%number"
		{RepairTime 20}
		{tags "engine%number"}
		{RepairOrder 3}
	}
)

(define "single_engine"
	("prop_blade"	volume(blade1)	number(1))
	("prop_blade"	volume(blade2)	number(1))
	("prop_blade"	volume(blade3)	number(1))
	("prop_blade"	volume(blade4)	number(1))
	("prop_spin"	volume(spin)	number(1))

	("engine"		volume(engine)	number(1))
	
	;//fake helicopter props
	("prop_blade"	volume(propeller)	number(1))
	("prop_blade"	volume(propeller1)	number(1))
	("prop_blade"	volume(propeller2)	number(1))
	("prop_blade"	volume(propeller3)	number(1))
	("prop_blade"	volume(propeller4)	number(1))
	("prop_blade"	volume(propeller5)	number(1))
	("prop_blade"	volume(propeller6)	number(1))
	
	("prop_blade"	volume(propeller_b1)	number(1))
	("prop_blade"	volume(propeller_b2)	number(1))
	("prop_blade"	volume(propeller_b3)	number(1))
	("prop_blade"	volume(propeller_b4)	number(1))
	
	("prop_spin"	volume(rotor)	number(1))
	("prop_spin"	volume(rotor_b)	number(1))
)

(define "double_engine"
	("single_engine")

	("prop_blade"	volume(blade1)	number(2))
	("prop_blade"	volume(blade2)	number(2))
	("prop_blade"	volume(blade3)	number(2))
	("prop_blade"	volume(blade4)	number(2))
	("prop_spin"	volume(spin)	number(2))

	("engine"		volume(engine)	number(2))
)

(define "triple_engine"
	("double_engine")

	("prop_blade"	volume(blade1)	number(3))
	("prop_blade"	volume(blade2)	number(3))
	("prop_blade"	volume(blade3)	number(3))
	("prop_blade"	volume(blade4)	number(3))
	("prop_spin"	volume(spin)	number(3))

	("engine"		volume(engine)	number(3))
)

(define "quad_engine"
	("triple_engine")

	("prop_blade"	volume(blade1)	number(4))
	("prop_blade"	volume(blade2)	number(4))
	("prop_blade"	volume(blade3)	number(4))
	("prop_blade"	volume(blade4)	number(4))
	("prop_spin"	volume(spin)	number(4))

	("engine"		volume(engine)	number(4))
)

(define "visible"
	{volume "%volume%number"
		%extra
		{tags %tags}
		{able {visible 0}}
		{thickness 1}
	}
)

(define "tearable"
	{volume "%volume%number"
		{component "%volume%number"}
		{tags "%volume%number"}
		{able {visible 0}}
		{thickness 1}
	}
	{component "%volume%number"
		{RepairTime 2}
		{tags "%volume%number" "part"}
		{RepairOrder 11}
	}
)

(define "wing"
	{volume "wing%number"
		{tags "wing%component" "%tag"}
		{component "wing%component"}
		{able {visible 0}}
		{thickness 1}
	}
	{component "wing%component"
		{RepairTime 20}
		{tags "wing%component" "%tag"}
		{RepairOrder 1}
	}
)

("wing" number(r1) component(right) tag(wing))
("wing" number(r2) component(right) tag(wing))
("wing" number(r3) component(right) tag(wing))
("wing" number(l1) component(left) tag(wing))
("wing" number(l2) component(left) tag(wing))
("wing" number(l3) component(left) tag(wing))

("visible" volume(body) number() tags() extra())
("visible" volume(body) number(1) tags() extra())
("visible" volume(body) number(2) tags() extra())
("visible" volume(body) number(3) tags() extra())
("visible" volume(body) number(4) tags() extra())
("visible" volume(body) number(5) tags() extra())
("visible" volume(body) number(6) tags() extra())
("visible" volume(body) number(7) tags() extra())
("visible" volume(body) number(8) tags() extra())

("visible" volume(canopy) number() tags() extra())
("visible" volume(cockpit) number() tags() extra())

("visible" volume(stabilizer) number() tags("body") extra({component "body"}))
("visible" volume(stabilizer) number(1) tags("body") extra({component "body"}))
("visible" volume(stabilizer) number(2) tags("body") extra({component "body"}))
("visible" volume(stabilizer) number(3) tags("body") extra({component "body"}))

("visible" volume(wheel) number(l) tags() extra())
("visible" volume(wheel) number(r) tags() extra())
("visible" volume(wheel) number(back) tags() extra())

;/*=============== Tearable Begin ===============*/


("tearable" volume(flap) number(1))
("tearable" volume(flap) number(2))

("tearable" volume(aileron) number(1))
("tearable" volume(aileron) number(2))

("tearable" volume(rudder) number())
("tearable" volume(rudder) number(1))
("tearable" volume(rudder) number(2))

("tearable" volume(elevator) number(1))
("tearable" volume(elevator) number(2))

("tearable" volume(gear_) number(l))
("tearable" volume(gear_) number(r))

;/*=============== Tearable End ===============*/


("basic_armor" args 99)

("body" repair(100))

("plane_durability" body(100) engine(50) propeller(50) wing(75) wheel(100) part(100))

("helicopter_durability" body(200) engine(100) rotor(50) rotor_b(50) part(100))

{perks
	{blastwave_modifier 12.5}
}